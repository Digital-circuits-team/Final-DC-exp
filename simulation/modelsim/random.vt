// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "12/19/2019 17:12:36"
                                                                                
// Verilog Test Bench template for design : random
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module random_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg rst;
reg [11:0] seed;
// wires                                               
wire [11:0]  randomNum;
integer i;
// assign statements (if any)                          
random i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.randomNum(randomNum),
	.rst(rst),
	.seed(seed)
);
initial                                                
begin                                                  
clk = 1'b1;
	seed  = 12'b0000000;
	rst = 1; #1;
	clk = 1'b0;#1;
	rst = 0;#1;
	clk = 1'b1;#1;
	for(i=0;i<257;i=i+1) begin
		clk=~clk;
		#5;
		clk=~clk;
		#5;
	end                       
end                                                    
                                                  
endmodule

